/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab5;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ДНС
 */
public class JFrame extends javax.swing.JFrame {

    private JFrame frame;
    private ArrayList<Doctor> doctors = new ArrayList<>();
    private ArrayList<Hosp> hosps = new ArrayList<>();
    private ArrayList<Area> areas = new ArrayList<>();
    private ArrayList<Post> posts = new ArrayList<>();
    private ArrayList<Patient> patients = new ArrayList<>();
    private ArrayList<Reception> receptions = new ArrayList<>();
    private ArrayList<ServicePrice> servicePrices = new ArrayList<>();
    String tab = "reception";
    String pk_tab = "nrec";
    DefaultComboBoxModel model;
    private DbManager dbManager;

    public ArrayList<Doctor> getDoctors() {
        return doctors;
    }

    public void setDoctors(ArrayList<Doctor> doctors) {
        this.doctors = doctors;
    }

    public ArrayList<Hosp> getHosps() {
        return hosps;
    }

    public void setHosps(ArrayList<Hosp> hosps) {
        this.hosps = hosps;
    }

    public ArrayList<Patient> getPatients() {
        return patients;
    }

    public void setPatients(ArrayList<Patient> patients) {
        this.patients = patients;
    }

    public ArrayList<Reception> getReceptions() {
        return receptions;
    }

    public void setReceptions(ArrayList<Reception> receptions) {
        this.receptions = receptions;
    }

    public ArrayList<ServicePrice> getServicePrices() {
        return servicePrices;
    }

    public void setServicePrices(ArrayList<ServicePrice> servicePrices) {
        this.servicePrices = servicePrices;
    }

    /**
     * Creates new form JFrame
     *
     * @param dbManager
     */
    public JFrame(DbManager dbManager) {
        initComponents();
        jTextField1.setText("OK");
        this.dbManager = dbManager;
        makeInvis();
        createListPost();
        createListDoc();
        createListArea();
        createListPatient();
        createListRec();
        createListServ();
        createListHosp();
        setjTableRec(receptions);
        makeRec();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        add_btn = new javax.swing.JButton();
        change_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txt_name = new javax.swing.JTextField();
        lbl_name = new javax.swing.JLabel();
        lbl_fio = new javax.swing.JLabel();
        lbl_date = new javax.swing.JLabel();
        lbl_tip = new javax.swing.JLabel();
        txt_int3 = new javax.swing.JTextField();
        lbl_doc = new javax.swing.JLabel();
        lbl_hosp = new javax.swing.JLabel();
        lbl_area = new javax.swing.JLabel();
        lbl_card = new javax.swing.JLabel();
        lbl_serv = new javax.swing.JLabel();
        lbl_post = new javax.swing.JLabel();
        lbl_dob = new javax.swing.JLabel();
        txt_dob = new javax.swing.JTextField();
        lbl_tip1 = new javax.swing.JLabel();
        lbl_price = new javax.swing.JLabel();
        id_ar_serv = new javax.swing.JComboBox<>();
        id_card = new javax.swing.JComboBox<>();
        id_hosp = new javax.swing.JComboBox<>();
        id_post_doc = new javax.swing.JComboBox<>();
        btn_note = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        connect = new javax.swing.JMenuItem();
        switchoff = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        patient_menu = new javax.swing.JMenuItem();
        doc_menu = new javax.swing.JMenuItem();
        area_menu = new javax.swing.JMenuItem();
        hosp_memu = new javax.swing.JMenuItem();
        serv_menu = new javax.swing.JMenuItem();
        rec_menu = new javax.swing.JMenuItem();
        post_menu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("jTextField1");

        add_btn.setText("Добавить");
        add_btn.setEnabled(false);
        add_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_btnActionPerformed(evt);
            }
        });

        change_btn.setText("Изменить");
        change_btn.setEnabled(false);
        change_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                change_btnActionPerformed(evt);
            }
        });

        delete_btn.setText("Удалить");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        lbl_name.setText("Название");

        lbl_fio.setText("ФИО");

        lbl_date.setText("Дата");

        lbl_tip.setText("В формате ГГГГ-ММ-ДД");

        lbl_doc.setText("Врач");

        lbl_hosp.setText("Больница");

        lbl_area.setText("Район");

        lbl_card.setText("Клиент");

        lbl_serv.setText("Услуга");

        lbl_post.setText("Должность");

        lbl_dob.setText("Дата рождения");

        lbl_tip1.setText("В формате ГГГГ-ММ-ДД");

        lbl_price.setText("Цена");

        id_ar_serv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        id_card.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        id_hosp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        id_post_doc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btn_note.setText("Записаться");
        btn_note.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_noteActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Добавление");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jMenu1.setText("Подключение к БД");
        jMenu1.setToolTipText("");

        connect.setText("Подключиться");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });
        jMenu1.add(connect);

        switchoff.setText("Отключиться");
        switchoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchoffActionPerformed(evt);
            }
        });
        jMenu1.add(switchoff);

        exit.setText("Выход");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Справочники");

        patient_menu.setText("Пациенты");
        patient_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_menuActionPerformed(evt);
            }
        });
        jMenu2.add(patient_menu);

        doc_menu.setText("Врачи");
        doc_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_menuActionPerformed(evt);
            }
        });
        jMenu2.add(doc_menu);

        area_menu.setText("Районы");
        area_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                area_menuActionPerformed(evt);
            }
        });
        jMenu2.add(area_menu);

        hosp_memu.setText("Больницы");
        hosp_memu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hosp_memuActionPerformed(evt);
            }
        });
        jMenu2.add(hosp_memu);

        serv_menu.setText("Услуги");
        serv_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serv_menuActionPerformed(evt);
            }
        });
        jMenu2.add(serv_menu);

        rec_menu.setText("Прием");
        rec_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rec_menuActionPerformed(evt);
            }
        });
        jMenu2.add(rec_menu);

        post_menu.setText("Должности");
        post_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                post_menuActionPerformed(evt);
            }
        });
        jMenu2.add(post_menu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(add_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(change_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delete_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lbl_fio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl_name)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbl_date)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_name, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_post)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbl_doc))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(lbl_price)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbl_hosp)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(id_post_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbl_serv)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbl_area))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txt_int3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(id_hosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbl_card)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(id_ar_serv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(id_card, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lbl_tip, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))
                        .addComponent(lbl_dob)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_dob, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 74, Short.MAX_VALUE))
                            .addComponent(lbl_tip1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_note)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_note)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_btn)
                    .addComponent(change_btn)
                    .addComponent(delete_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_name)
                    .addComponent(lbl_fio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_date)
                    .addComponent(lbl_dob)
                    .addComponent(txt_dob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_tip)
                    .addComponent(lbl_tip1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_doc)
                    .addComponent(lbl_area)
                    .addComponent(lbl_serv)
                    .addComponent(lbl_post)
                    .addComponent(id_ar_serv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id_post_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_int3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_hosp)
                    .addComponent(lbl_card)
                    .addComponent(lbl_price)
                    .addComponent(id_card, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id_hosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbl_name.getAccessibleContext().setAccessibleName("lbl_name");
        lbl_fio.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        Autorize connectWindow = new Autorize();
        connectWindow.setVisible(true);
    }//GEN-LAST:event_connectActionPerformed

    private void makeRec() {
        lbl_card.setVisible(true);
        lbl_date.setVisible(true);
        lbl_doc.setVisible(true);
        lbl_hosp.setVisible(true);
        lbl_serv.setVisible(true);
        lbl_tip.setVisible(true);
        txt_name.setVisible(true);
        id_ar_serv.setVisible(true);
        id_card.setVisible(true);
        id_hosp.setVisible(true);
        id_post_doc.setVisible(true);
        model = new DefaultComboBoxModel(hosps.toArray());
        id_hosp.setModel(model);
        model = new DefaultComboBoxModel(servicePrices.toArray());
        id_ar_serv.setModel(model);
        model = new DefaultComboBoxModel(patients.toArray());
        id_card.setModel(model);
        model = new DefaultComboBoxModel(doctors.toArray());
        id_post_doc.setModel(model);
    }
    private void switchoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchoffActionPerformed
        if (dbManager.closeConnection()) {
            jTextField1.setText("OFF");
        }
    }//GEN-LAST:event_switchoffActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void post_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_post_menuActionPerformed
        makeInvis();
        lbl_name.setVisible(true);
        txt_name.setVisible(true);
        tab = "post";
        pk_tab = "npost";
        setjTablePost(posts);
    }//GEN-LAST:event_post_menuActionPerformed

    private void doc_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_menuActionPerformed
        makeInvis();
        lbl_fio.setVisible(true);
        lbl_post.setVisible(true);
        lbl_hosp.setVisible(true);
        txt_name.setVisible(true);
        id_post_doc.setVisible(true);
        id_hosp.setVisible(true);
        pk_tab = "ndoctor";
        tab = "doctor";
        model = new DefaultComboBoxModel(hosps.toArray());
        id_hosp.setModel(model);
        model = new DefaultComboBoxModel(posts.toArray());
        id_post_doc.setModel(model);
        setjTableDoctor(doctors);
    }//GEN-LAST:event_doc_menuActionPerformed

    private void area_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_area_menuActionPerformed
        makeInvis();
        txt_name.setVisible(true);
        lbl_name.setVisible(true);
        pk_tab = "narea";
        tab = "area";
        setjTableArea(areas);
    }//GEN-LAST:event_area_menuActionPerformed

    private void patient_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_menuActionPerformed
        makeInvis();
        lbl_fio.setVisible(true);
        lbl_dob.setVisible(true);
        lbl_area.setVisible(true);
        lbl_tip1.setVisible(true);
        txt_dob.setVisible(true);
        txt_name.setVisible(true);
        id_ar_serv.setVisible(true);
        pk_tab = "ncard";
        tab = "patient";
        patients.removeAll(patients);
        createListPatient();
        model = new DefaultComboBoxModel(areas.toArray());
        id_ar_serv.setModel(model);
        setjTablePatient(patients);
    }//GEN-LAST:event_patient_menuActionPerformed

    private void hosp_memuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hosp_memuActionPerformed
        makeInvis();
        lbl_name.setVisible(true);
        txt_name.setVisible(true);
        lbl_hosp.setVisible(true);
        id_ar_serv.setVisible(true);
        model = new DefaultComboBoxModel(areas.toArray());
        id_ar_serv.setModel(model);
        pk_tab = "nhosp";
        tab = "hosp";
        setjTableHosp(hosps);
    }//GEN-LAST:event_hosp_memuActionPerformed

    public DbManager getDbManager() {
        return dbManager;
    }

    public void setDbManager(DbManager dbManager) {
        this.dbManager = dbManager;
    }

    private void serv_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serv_menuActionPerformed
        makeInvis();
        lbl_price.setVisible(true);
        lbl_name.setVisible(true);
        txt_name.setVisible(true);
        txt_int3.setVisible(true);
        pk_tab = "nservice";
        tab = "serviceprice";
        setjTableServ(servicePrices);
    }//GEN-LAST:event_serv_menuActionPerformed

    private void rec_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rec_menuActionPerformed
        makeInvis();
        makeRec();
        tab = "reception";
        pk_tab = "nrec";
        setjTableRec(receptions);
    }//GEN-LAST:event_rec_menuActionPerformed

    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
        try {
            Object n = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
            int k = Integer.parseInt(n.toString());
            String str = "DELETE FROM " + tab + " WHERE " + pk_tab + " = " + k + ";";
            dbManager.executeUpdate(str);
            switch (tab) {
                case "patient":
                    patients.remove(k);
                    createListPatient();
                    setjTablePatient(patients);
                    break;
                case "doctor":
                    doctors.remove(k);
                    createListDoc();
                    setjTableDoctor(doctors);
                    break;
                case "area":
                    areas.remove(k);
                    createListArea();
                    setjTableArea(areas);
                    break;
                case "hosp":
                    hosps.remove(k);
                    createListHosp();
                    setjTableHosp(hosps);
                    break;
                case "serviceprice":
                    servicePrices.remove(k);
                    createListServ();
                    setjTableServ(servicePrices);
                    break;
                case "reception":
                    receptions.remove(k);
                    createListRec();
                    setjTableRec(receptions);
                    break;
                case "post":
                    posts.remove(k);
                    createListPost();
                    setjTablePost(posts);
                    break;
            }

        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArrayIndexOutOfBoundsException exx) {
            JOptionPane.showMessageDialog(frame, "Выберите строку");
        }
    }//GEN-LAST:event_delete_btnActionPerformed

    private void add_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_btnActionPerformed
        try {
            switch (tab) {
                case "patient":
                    try {
                        String str = "INSERT INTO " + tab + " values('" + patients.size() + "','";
                        String[] name = txt_name.getText().split(" ");
                        str += name[0] + "','" + name[1] + "','" + name[2] + "','" + txt_dob.getText() + "','" + id_ar_serv.getSelectedIndex() + "');";
                        dbManager.executeUpdate(str);
                        createListPatient();
                        setjTablePatient(patients);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "doctor":
                    try {
                        String str = "INSERT INTO " + tab + " values('" + doctors.size() + "','";
                        String[] name = txt_name.getText().split(" ");
                        str += name[0] + "','" + name[1] + "','" + name[2] + "','" + id_post_doc.getSelectedIndex() + "','" + id_hosp.getSelectedIndex() + "');";
                        dbManager.executeUpdate(str);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    createListDoc();
                    setjTableDoctor(doctors);
                    break;
                case "area": {
                    String str = "INSERT INTO " + tab + " values('" + areas.size() + "','" + txt_name.getText() + "');";
                    try {
                        dbManager.executeUpdate(str);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    createListArea();
                    setjTableArea(areas);
                    break;
                }
                case "hosp":
                    try {
                        String str = "INSERT INTO " + tab + " values('" + hosps.size() + "','"
                                + txt_name.getText() + "','" + id_ar_serv.getSelectedIndex() + "');";
                        dbManager.executeUpdate(str);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    createListHosp();
                    setjTableHosp(hosps);
                    break;
                case "serviceprice":
                    try {
                        String str = "INSERT INTO " + tab + " values('" + servicePrices.size()
                                + "','" + txt_name.getText() + "','" + Double.parseDouble(txt_int3.getText()) + "');";
                        dbManager.executeUpdate(str);
                        createListServ();
                        setjTableServ(servicePrices);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "reception":
                    try {
                        String str = "INSERT INTO " + tab + " values('" + receptions.size() + "','";
                        str += txt_name + "','" + id_post_doc.getSelectedIndex() + "','" + id_ar_serv.getSelectedIndex() + "','"
                                + id_card.getSelectedIndex() + "','" + id_hosp.getSelectedIndex() + "');";
                        dbManager.executeUpdate(str);
                        createListRec();
                        setjTableRec(receptions);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "post": {
                    String str = "INSERT INTO " + tab + " values('" + posts.size() + "','" + txt_name.getText() + "');";
                    try {
                        dbManager.executeUpdate(str);
                        createListPost();
                        setjTablePost(posts);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                default:
                    break;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(frame, "Проверьте данные");
        }
    }//GEN-LAST:event_add_btnActionPerformed

    private void change_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_change_btnActionPerformed
        try {
            switch (tab) {
                case "patient":
                    try {
                        String str = "UPDATE " + tab + " SET ";
                        String[] name = txt_name.getText().split(" ");
                        Object n = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                        int k = Integer.parseInt(n.toString());
                        Date dob = patients.get(k).getDob();
                        str += "surname = '" + name[0] + "', name = '" + name[1] + "', middlename='" + name[2] + "',dob = '" + dob + "',narea = " + id_ar_serv.getSelectedIndex()
                                + " WHERE " + pk_tab + "=" + k;
                        dbManager.executeUpdate(str);
                        patients.get(jTable1.getSelectedRow() + 1).setDob(dob);
                        patients.get(jTable1.getSelectedRow() + 1).setFirstName(name[1]);
                        patients.get(jTable1.getSelectedRow() + 1).setLastName(name[0]);
                        patients.get(jTable1.getSelectedRow() + 1).setMiddleName(name[2]);
                        patients.get(jTable1.getSelectedRow() + 1).setId_area(id_ar_serv.getSelectedIndex());
                        setjTablePatient(patients);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "doctor":
                    try {
                        String str = "UPDATE " + tab + " SET ";
                        String[] name = txt_name.getText().split(" ");
                        Object n = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                        int k = Integer.parseInt(n.toString());
                        str += "surname = '" + name[0] + "', name = '" + name[1] + "', middlename='" + name[2] + "', npost=" + id_post_doc.getSelectedIndex()
                                + ",nhosp = " + id_hosp.getSelectedIndex() + " WHERE " + pk_tab + "=" + k;
                        dbManager.executeUpdate(str);
                        doctors.get(jTable1.getSelectedRow() + 1).setFirstName(name[1]);
                        doctors.get(jTable1.getSelectedRow() + 1).setLastName(name[0]);
                        doctors.get(jTable1.getSelectedRow() + 1).setMiddleName(name[2]);
                        doctors.get(jTable1.getSelectedRow() + 1).setId_hosp(id_hosp.getSelectedIndex());
                        doctors.get(jTable1.getSelectedRow() + 1).setId_post(id_post_doc.getSelectedIndex());
                        setjTableDoctor(doctors);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "area": {
                    String str = "UPDATE " + tab + " SET ";
                    Object n = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                    int k = Integer.parseInt(n.toString());
                    str += "district='" + txt_name.getText() + "' WHERE " + pk_tab + "=" + k;
                    try {
                        dbManager.executeUpdate(str);
                        areas.get(jTable1.getSelectedRow() + 1).setDistrict(txt_name.getText());
                        setjTableArea(areas);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "hosp":
                    try {
                        String str = "UPDATE " + tab + " SET ";
                        Object n = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                        int k = Integer.parseInt(n.toString());
                        str += "name='" + txt_name.getText() + "', narea=" + id_ar_serv.getSelectedIndex() + " WHERE " + pk_tab + "=" + k;
                        dbManager.executeUpdate(str);
                        hosps.get(jTable1.getSelectedRow() + 1).setId_area(id_ar_serv.getSelectedIndex());
                        hosps.get(jTable1.getSelectedRow() + 1).setName(txt_name.getText());
                        setjTableHosp(hosps);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "serviceprice":
                    try {
                        String str = "UPDATE " + tab + " SET ";
                        Object n = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                        int k = Integer.parseInt(n.toString());
                        str += "service='" + txt_name.getText() + "', serviceprice=" + Double.parseDouble(txt_int3.getText()) + " WHERE " + pk_tab + "=" + k;
                        dbManager.executeUpdate(str);
                        servicePrices.get(jTable1.getSelectedRow() + 1).setService(txt_name.getText());
                        servicePrices.get(jTable1.getSelectedRow() + 1).setPrice(Double.parseDouble(txt_int3.getText()));
                        setjTableServ(servicePrices);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "reception":
                    try {
                        String str = "UPDATE " + tab + " SET ";
                        Object n = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                        int k = Integer.parseInt(n.toString());
                        Date date = receptions.get(k).getDate();
                        str += "data = '" + txt_name.getText() + "',ndoctor =" + id_post_doc.getSelectedIndex() + ",nservice=" + id_ar_serv.getSelectedIndex() + ",ncard ="
                                + id_card.getSelectedIndex() + ",nhosp = " + id_hosp.getSelectedIndex() + " WHERE " + pk_tab + "=" + k;
                        dbManager.executeUpdate(str);
                        receptions.get(jTable1.getSelectedRow() + 1).setDate(date);
                        receptions.get(jTable1.getSelectedRow() + 1).setId_card(id_card.getSelectedIndex());
                        receptions.get(jTable1.getSelectedRow() + 1).setId_doc(id_post_doc.getSelectedIndex());
                        receptions.get(jTable1.getSelectedRow() + 1).setId_hosp(id_hosp.getSelectedIndex());
                        receptions.get(jTable1.getSelectedRow() + 1).setId_serv(id_ar_serv.getSelectedIndex());
                        setjTableRec(receptions);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "post": {
                    String str = "UPDATE " + tab + " SET ";
                    Object n = jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                    int k = Integer.parseInt(n.toString());
                    str += "post='" + txt_name.getText() + "' WHERE " + pk_tab + "=" + k;
                    try {
                        dbManager.executeUpdate(str);
                        posts.get(jTable1.getSelectedRow() + 1).setPost(txt_name.getText());
                        setjTablePost(posts);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                default:
                    break;
            }
        } catch (ArrayIndexOutOfBoundsException exx) {
            JOptionPane.showMessageDialog(frame, "Выберите строку");
        }
    }//GEN-LAST:event_change_btnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        long k;
        if (!jCheckBox1.isSelected()) {
            switch (tab) {
                case "patient":
                    txt_name.setText(patients.get(jTable1.getSelectedRow() + 1).toString2());
                    txt_dob.setText(patients.get(jTable1.getSelectedRow() + 1).getDob().toString());
                    k = patients.get(jTable1.getSelectedRow() + 1).getId_area();
                    id_ar_serv.setSelectedIndex(Integer.parseInt(k + ""));
                    break;
                case "post":
                    txt_name.setText(posts.get(jTable1.getSelectedRow() + 1).getPost());
                    break;
                case "hosp":
                    txt_name.setText(hosps.get(jTable1.getSelectedRow() + 1).getName());
                    k = hosps.get(jTable1.getSelectedRow() + 1).getId_area();
                    id_ar_serv.setSelectedIndex(Integer.parseInt(k + ""));
                    break;
                case "reception":
                    txt_name.setText(receptions.get(jTable1.getSelectedRow() + 1).getDate().toString());
                    k = receptions.get(jTable1.getSelectedRow() + 1).getId_card();
                    id_card.setSelectedIndex(Integer.parseInt(k + ""));
                    k = receptions.get(jTable1.getSelectedRow() + 1).getId_doc();
                    id_post_doc.setSelectedIndex(Integer.parseInt(k + ""));
                    k = receptions.get(jTable1.getSelectedRow() + 1).getId_hosp();
                    id_hosp.setSelectedIndex(Integer.parseInt(k + ""));
                    k = receptions.get(jTable1.getSelectedRow() + 1).getId_serv();
                    id_ar_serv.setSelectedIndex(Integer.parseInt(k + ""));
                    break;
                case "serviceprice":
                    txt_name.setText(servicePrices.get(jTable1.getSelectedRow() + 1).getService());
                    txt_int3.setText(servicePrices.get(jTable1.getSelectedRow() + 1).getPrice() + "");
                    break;
                case "area":
                    txt_name.setText(areas.get(jTable1.getSelectedRow() + 1).getDistrict());
                    break;
                case "doctor":
                    txt_name.setText(doctors.get(jTable1.getSelectedRow() + 1).toString2());
                    k = doctors.get(jTable1.getSelectedRow() + 1).getId_hosp();
                    id_hosp.setSelectedIndex(Integer.parseInt(k + ""));
                    k = doctors.get(jTable1.getSelectedRow() + 1).getId_post();
                    id_post_doc.setSelectedIndex(Integer.parseInt(k + ""));
                    break;
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btn_noteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_noteActionPerformed
        CreateRec crR = new CreateRec();
        crR.setDoctors(doctors);
        crR.setPatients(patients);
        crR.setHosps(hosps);
        crR.setReceptions(receptions);
        crR.setServicePrices(servicePrices);
        crR.setDbManager(dbManager);
        crR.filling();
        crR.setVisible(true);
        crR.getReceptions();
        createListRec();
        setjTableRec(receptions);
    }//GEN-LAST:event_btn_noteActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            add_btn.setEnabled(true);
            change_btn.setEnabled(false);
        } else {
            change_btn.setEnabled(true);
            add_btn.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_btn;
    private javax.swing.JMenuItem area_menu;
    private javax.swing.JButton btn_note;
    private javax.swing.JButton change_btn;
    private javax.swing.JMenuItem connect;
    private javax.swing.JButton delete_btn;
    private javax.swing.JMenuItem doc_menu;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenuItem hosp_memu;
    private javax.swing.JComboBox<String> id_ar_serv;
    private javax.swing.JComboBox<String> id_card;
    private javax.swing.JComboBox<String> id_hosp;
    private javax.swing.JComboBox<String> id_post_doc;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbl_area;
    private javax.swing.JLabel lbl_card;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JLabel lbl_dob;
    private javax.swing.JLabel lbl_doc;
    private javax.swing.JLabel lbl_fio;
    private javax.swing.JLabel lbl_hosp;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_post;
    private javax.swing.JLabel lbl_price;
    private javax.swing.JLabel lbl_serv;
    private javax.swing.JLabel lbl_tip;
    private javax.swing.JLabel lbl_tip1;
    private javax.swing.JMenuItem patient_menu;
    private javax.swing.JMenuItem post_menu;
    private javax.swing.JMenuItem rec_menu;
    private javax.swing.JMenuItem serv_menu;
    private javax.swing.JMenuItem switchoff;
    private javax.swing.JTextField txt_dob;
    private javax.swing.JTextField txt_int3;
    private javax.swing.JTextField txt_name;
    // End of variables declaration//GEN-END:variables

    public void setjTablePost(ArrayList<Post> posts) {
        Object[] namesEmployee = {"ID", "Пост"};
        DefaultTableModel modelEmployee = new DefaultTableModel(namesEmployee, 0);
        for (int i = 1; i < posts.size(); ++i) {
            Object[] row = {posts.get(i).getId(),
                posts.get(i).getPost()};
            modelEmployee.insertRow(i - 1, row);
        }
        jTable1.setModel(modelEmployee);
    }

    public void setjTableDoctor(ArrayList<Doctor> doctors) {
        Object[] namesEmployee = {"ID", "Фамилия", "Имя", "Отчество", "Должность", "Больница"};
        DefaultTableModel modelEmployee = new DefaultTableModel(namesEmployee, 0);
        for (int i = 1; i < doctors.size(); ++i) {
            Object[] row = {doctors.get(i).getId(),
                doctors.get(i).getLastName(),
                doctors.get(i).getFirstName(),
                doctors.get(i).getMiddleName(),
                posts.get(Integer.parseInt(doctors.get(i).getId_post() + "")).getPost(),
                hosps.get(Integer.parseInt(doctors.get(i).getId_hosp() + "")).getName()
            };
            modelEmployee.insertRow(i - 1, row);
        }
        jTable1.setModel(modelEmployee);
    }

    public void setjTableArea(ArrayList<Area> areas) {
        Object[] namesEmployee = {"ID", "Район"};
        DefaultTableModel modelEmployee = new DefaultTableModel(namesEmployee, 0);
        for (int i = 1; i < areas.size(); ++i) {
            Object[] row = {areas.get(i).getId(),
                areas.get(i).getDistrict()};
            modelEmployee.insertRow(i - 1, row);
        }
        jTable1.setModel(modelEmployee);
    }

    public void setjTablePatient(ArrayList<Patient> patients) {
        Object[] namesEmployee = {"ID", "Фамилия", "Имя", "Отчество", "Дата рождения", "Район"};
        DefaultTableModel modelEmployee = new DefaultTableModel(namesEmployee, 0);
        for (int i = 1; i < patients.size(); ++i) {
            Object[] row = {patients.get(i).getId(),
                patients.get(i).getLastName(),
                patients.get(i).getFirstName(),
                patients.get(i).getMiddleName(),
                patients.get(i).getDob(),
                areas.get(Integer.parseInt(patients.get(i).getId_area() + "")).getDistrict()};
            modelEmployee.insertRow(i - 1, row);
        }
        jTable1.setModel(modelEmployee);
    }

    public void setjTableHosp(ArrayList<Hosp> hosps) {
        Object[] namesEmployee = {"ID", "Название", "Район"};
        DefaultTableModel modelEmployee = new DefaultTableModel(namesEmployee, 0);
        for (int i = 1; i < hosps.size(); ++i) {
            Object[] row = {hosps.get(i).getId(),
                hosps.get(i).getName(),
                areas.get(Integer.parseInt(hosps.get(i).getId_area() + "")).getDistrict()};
            modelEmployee.insertRow(i - 1, row);
        }
        jTable1.setModel(modelEmployee);
    }

    public void setjTableServ(ArrayList<ServicePrice> servicePrices) {
        Object[] namesEmployee = {"ID", "Название", "Стоимость"};
        DefaultTableModel modelEmployee = new DefaultTableModel(namesEmployee, 0);
        for (int i = 1; i < servicePrices.size(); ++i) {
            Object[] row = {servicePrices.get(i).getId(),
                servicePrices.get(i).getService(),
                servicePrices.get(i).getPrice()};
            modelEmployee.insertRow(i - 1, row);
        }
        jTable1.setModel(modelEmployee);
    }

    private void setjTableRec(ArrayList<Reception> receptions) {
        Object[] namesEmployee = {"ID", "Дата", "Доктор", "Услуга", "Пациент", "Больница"};
        DefaultTableModel modelEmployee = new DefaultTableModel(namesEmployee, 0);
        for (int i = 1; i < receptions.size(); ++i) {
            Object[] row = {receptions.get(i).getId(),
                receptions.get(i).getDate(),
                doctors.get(Integer.parseInt(receptions.get(i).getId_doc() + "")).getLastName(),
                servicePrices.get(Integer.parseInt(receptions.get(i).getId_serv() + "")).getService(),
                patients.get(Integer.parseInt(receptions.get(i).getId_card() + "")).getLastName(),
                hosps.get(Integer.parseInt(receptions.get(i).getId_hosp() + "")).getName()};
            modelEmployee.insertRow(i - 1, row);
        }
        jTable1.setModel(modelEmployee);
    }

    private void makeInvis() {
        lbl_fio.setVisible(false);
        lbl_name.setVisible(false);
        lbl_area.setVisible(false);
        lbl_card.setVisible(false);
        lbl_date.setVisible(false);
        lbl_dob.setVisible(false);
        lbl_doc.setVisible(false);
        lbl_hosp.setVisible(false);
        lbl_post.setVisible(false);
        lbl_serv.setVisible(false);
        lbl_tip.setVisible(false);
        lbl_tip1.setVisible(false);
        txt_dob.setVisible(false);
        txt_int3.setVisible(false);
        txt_name.setVisible(false);
        lbl_price.setVisible(false);
        id_ar_serv.setVisible(false);
        model = new DefaultComboBoxModel();
        id_ar_serv.setModel(model);
        id_card.setVisible(false);
        id_card.setModel(model);
        id_hosp.setVisible(false);
        id_hosp.setModel(model);
        id_post_doc.setVisible(false);
        id_post_doc.setModel(model);
    }

    private void createListPost() {
        posts.removeAll(posts);
        posts.add(null);
        try {
            ResultSet rs = dbManager.executeQuery("SELECT * FROM post");
            while (rs.next()) {
                Post post = new Post();
                post.setId(rs.getLong("npost"));
                post.setPost(rs.getString("post"));
                posts.add(post);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void createListDoc() {
        doctors.removeAll(doctors);
        doctors.add(null);
        try {
            ResultSet rs = dbManager.executeQuery("SELECT * FROM doctor");
            while (rs.next()) {
                Doctor doctor = new Doctor();
                doctor.setId(rs.getLong("ndoctor"));
                doctor.setLastName(rs.getString("surname"));
                doctor.setFirstName(rs.getString("name"));
                doctor.setMiddleName(rs.getString("middlename"));
                doctor.setId_post(rs.getLong("npost"));
                doctor.setId_hosp(rs.getLong("nhosp"));
                doctors.add(doctor);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void createListArea() {
        areas.removeAll(areas);
        areas.add(null);
        try {
            ResultSet rs = dbManager.executeQuery("SELECT * FROM area");
            while (rs.next()) {
                Area area = new Area();
                area.setId(rs.getLong("narea"));
                area.setDistrict(rs.getString("district"));
                areas.add(area);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void createListPatient() {
        patients.removeAll(patients);
        patients.add(null);
        try {
            ResultSet rs = dbManager.executeQuery("SELECT * FROM patient");
            while (rs.next()) {
                Patient patient = new Patient();
                patient.setId(rs.getLong("ncard"));
                patient.setLastName(rs.getString("surname"));
                patient.setFirstName(rs.getString("name"));
                patient.setMiddleName(rs.getString("middlename"));
                patient.setDob(rs.getDate("dob"));
                patient.setId_area(rs.getLong("narea"));
                patients.add(patient);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void createListHosp() {
        hosps.removeAll(hosps);
        hosps.add(null);
        try {
            ResultSet rs = dbManager.executeQuery("SELECT * FROM hosp");
            while (rs.next()) {
                Hosp hosp = new Hosp();
                hosp.setId(rs.getLong("nhosp"));
                hosp.setId_area(rs.getLong("narea"));
                hosp.setName(rs.getString("name"));
                hosps.add(hosp);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void createListServ() {
        servicePrices.removeAll(servicePrices);
        servicePrices.add(null);
        try {
            ResultSet rs = dbManager.executeQuery("SELECT * FROM serviceprice");
            while (rs.next()) {
                ServicePrice servicePrice = new ServicePrice();
                servicePrice.setId(rs.getLong("nservice"));
                servicePrice.setService(rs.getString("service"));
                servicePrice.setPrice(rs.getDouble("serviceprice"));
                servicePrices.add(servicePrice);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void createListRec() {
        receptions.removeAll(receptions);
        receptions.add(null);
        try {
            ResultSet rs = dbManager.executeQuery("SELECT * FROM reception");
            while (rs.next()) {
                Reception reception = new Reception();
                reception.setId(rs.getLong("nrec"));
                reception.setDate(rs.getDate("data"));
                reception.setId_card(rs.getLong("ncard"));
                reception.setId_doc(rs.getLong("ndoctor"));
                reception.setId_hosp(rs.getLong("nhosp"));
                reception.setId_serv(rs.getLong("nservice"));
                receptions.add(reception);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
